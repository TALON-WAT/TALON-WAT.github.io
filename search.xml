<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[note04]]></title>
    <url>%2F2019%2F10%2F11%2Fnote04%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[note03]]></title>
    <url>%2F2019%2F10%2F10%2Fnote03%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[设计模式_02_静态代理与动态代理]]></title>
    <url>%2F2019%2F09%2F25%2Fnote02%2F</url>
    <content type="text"><![CDATA[代理模式代理模式的应用场景: 一个对象不能直接访问另外一个对象的时候，我们可以通过访问该对象的代理对象去访问它。 在不修改类的源码的情况下，动态地增强类的方法，便于程序的扩展 动态地给接口创建代理对象，动态地实现接口中的方法 统一在方法执行之前做前置处理工作，在方法执行之后做后置处理工作，这样可以大大减少代码中的重复代码。这其实就是Spring中的AOP思想 面向对象设计有一个基本原则:开放封闭原则,对扩展开放对修改封闭 改变/增强一个方法，我们又哪些办法可以做到： 继承 装饰者模式： 装饰者和被装饰者要实现相同的接口 将被装饰者的对象传入到装饰者中 如果不需要增强的方法由被装饰者完成，装饰者只增强方法 代理模式:静态代理和动态代理 代理模式的组成部分: 代理者 委托者(被代理者) 接口 代理模式的特点: 代理者和委托者要实现相同的接口 将委托者的对象传入到代理者中 如果不需要增强的方法由委托者完成，代理者只增强方法 代理模式的分类: 静态代理模式:包含委托类、代理类以及统一的接口 动态代理模式:包含委托类和统一的接口，不包含代理类，而是使用反射机制在调用的时候动态生成代理对象 一.静态代理1.Diagrams 2.代码实现123456789101112131415161718192021222324252627282930313233public interface IKindWomen &#123; void happy();&#125;public class Jinlian implements IKindWomen &#123; @Override public void happy() &#123; System.out.println("金莲正在happy..."); &#125;&#125;public class Wangpo implements IKindWomen &#123; //依赖倒置原则:依赖抽象不依赖具体,目的是增强程序的可扩展性 private IKindWomen women; public Wangpo(Jinlian jinlian) &#123; this.women = jinlian; &#125; @Override public void happy() &#123; System.out.println("open room"); women.happy(); System.out.println("clear room"); &#125;&#125;@Testpublic void test()&#123; Jinlian jinlian = new Jinlian(); Wangpo wangpo = new Wangpo(jinlian); wangpo.happy();&#125; 二.动态代理1.Diagrams 2.代码实现123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869public interface IKindWoman &#123; void happy(); double collect(double money);&#125;public class Jinlian implements IKindWoman &#123; @Override public void happy() &#123; System.out.println("金莲正在happy..."); &#125; @Override public double collect(double money) &#123; System.out.println("金莲收款: " + money); return money; &#125;&#125;@Testpublic void test()&#123; //访问金莲的happy方法 Jinlian jinlian = new Jinlian(); //使用动态代理技术生成代理对象 //Proxy.newProxyInstance()方法有三个参数: // 1. 类加载器 // 2. 被代理者实现的所有接口的字节码对象 // 3. InvocationHandler接口的实现类对象 Class clazz = jinlian.getClass(); ClassLoader classLoader = clazz.getClassLoader();//获取类加载器 Class[] interfaces = clazz.getInterfaces();//委托者实现的所有接口 //Proxy.newProxyInstance(),方法的目的创建代理对象 //代理对象和委托对象肯定要实现相同的接口----IKindWomen IKindWoman proxyInstance = (IKindWoman) Proxy.newProxyInstance(classLoader, interfaces, new InvocationHandler() &#123; @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123; //代理者调用任何方法,都会执行invoke() //所以在invoke()方法中编写代理规则 //invoke()方法的三个参数:1.proxy表示代理对象本身,我们不要去使用它,否则会发生死递归 //2. method表示,当前代理对象调用的那个方法 3. args表示当前代理对象调用的方法中传入的参数 String methodName = method.getName(); //只有当调用的是happy()方法,我们才做happy的代理 if ("happy".equals(methodName))&#123; System.out.println("open room"); method.invoke(jinlian,args); System.out.println("clear room"); return null; &#125; //只有当调用的方法是collect的时候,才执行收钱的代理 if ("collect".equals(methodName))&#123; double money = (double) args[0]; System.out.println("扣除中介费 40%: " + money*0.4); return method.invoke(jinlian, money*0.6); &#125; //如果调用的方法是其它的方法的话,则不需要被代理,那么就执行委托者原本的方法 return method.invoke(jinlian,args); &#125; &#125;); proxyInstance.happy(); double collect = proxyInstance.collect(800); System.out.println(collect);&#125;]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[设计模式_01_装饰与适配]]></title>
    <url>%2F2019%2F09%2F22%2Fnote01%2F</url>
    <content type="text"><![CDATA[一.装饰者1.Diagrams 2.代码实现123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778//接口Manpublic interface Man &#123; void eat(); void sleep(); void fight();&#125;//类NormalMan 实现 接口Man public class NormalMan implements Man&#123; //重写接口中的全部抽象方法 @Override public void eat() &#123; System.out.println("stop playing around and eat!"); &#125; @Override public void sleep() &#123; System.out.println("sleep like a log "); &#125; @Override public void fight() &#123; System.out.println("fight ability : 5 "); &#125;&#125;//类IronMan 实现 接口Manpublic class IronMan implements Man &#123; //这里将被装饰者作为成员变量 private NormalMan normalMan; public IronMan() &#123; &#125; public IronMan(NormalMan normalMan) &#123; this.normalMan = normalMan; &#125; //以下方法不需要被加强 则直接调用方法 @Override public void eat() &#123; normalMan.eat(); &#125; @Override public void sleep() &#123; normalMan.sleep(); &#125; //这里需要加强 则重写以加强方法 @Override public void fight() &#123; System.out.println("fight ability : 100 up"); &#125;&#125;//Test@Testpublic void deckerTest() &#123; NormalMan normalMan = new NormalMan(); normalMan.eat(); normalMan.sleep(); normalMan.fight(); IronMan ironMan = new IronMan(normalMan); ironMan.eat(); ironMan.sleep(); ironMan.fight();&#125;//consolestop playing around and eat!sleep like a log fight ability : 5 stop playing around and eat!sleep like a log fight ability : 100 up 二.适配器1.Diagrams 2.代码实现12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970//接口Monkpublic interface Monk &#123; void longSeat(); void patter(); void eatMeat(); void pullWillow();&#125;//类MonkAdapter 实现接口Monk 将方法存入适配器public class MonkAdapter implements Monk&#123; @Override public void longSeat() &#123; &#125; @Override public void patter() &#123; &#125; @Override public void eatMeat() &#123; &#125; @Override public void pullWillow() &#123; &#125;&#125;//继承适配器,需要什么就拿什么public class huaMonk extends MonkAdapter&#123; public void eatMeat() &#123; System.out.println("吃肉ing..."); &#125; public void pullWillow() &#123; System.out.println("倒拔杨柳ing..."); &#125;&#125;public class yixiuMonk extends MonkAdapter&#123; public void longSeat() &#123; System.out.println("打坐ing..."); &#125; public void patter() &#123; System.out.println("念经ing..."); &#125;&#125;@Testpublic void adapterTest() &#123; yixiuMonk yixiu = new yixiuMonk(); yixiu.longSeat(); yixiu.patter(); huaMonk hua = new huaMonk(); hua.eatMeat(); hua.pullWillow();&#125;//console打坐ing...念经ing... 吃肉ing...倒拔杨柳ing...]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[prost]]></title>
    <url>%2F2019%2F09%2F21%2Fprost%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[md01]]></title>
    <url>%2F2019%2F09%2F20%2Fmd01%2F</url>
    <content type="text"><![CDATA[9/20]]></content>
  </entry>
  <entry>
    <title><![CDATA[Tank Battle by Java]]></title>
    <url>%2F2019%2F09%2F14%2FTank-Battle-by-Java%2F</url>
    <content type="text"><![CDATA[坦克大战 单人版一款小游戏 使用了LWJGL…敌人未上线 GitHub: https://github.com/TALON-WAT/Tank-Battle-by-Java]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>game</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[pictureTest]]></title>
    <url>%2F2019%2F09%2F13%2FpictureTest%2F</url>
    <content type="text"><![CDATA[hello everyone~]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello Everyone!~]]></title>
    <url>%2F2019%2F09%2F13%2Fhello-hexo%2F</url>
    <content type="text"><![CDATA[中秋快乐~ 这是我的个人博客! 先给大家分享一些我之前看过的小说! 小说 Novel《平凡的世界》路遥 平凡的世界,不平凡的两家人. 孙家,田家,以及他们辐射出的周围人在黄土地上的故事. 《人类简史》9-17 开始阅读 《三体》9-18 购入 《嫌疑犯X的献身》东野圭吾 《恶意》东野圭吾 《白夜行》东野圭吾 《回廊亭杀人事件》东野圭吾 《放学后》东野圭吾 《秘密》东野圭吾]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>other</tag>
      </tags>
  </entry>
</search>
